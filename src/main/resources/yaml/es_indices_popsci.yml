# Indices settings
Indices:
  # First index
  # Name of the index to be created, existing index with same name will be deleted
  - index_name: cases
    type: neo4j
    # type mapping for each property of the index
    mapping:
      arm:
        type: keyword
      arms:
        type: keyword
      biospecimens_available:
        type: keyword
      case_id:
        type: keyword
      case_ids:
        type: keyword
      center:
        type: keyword
      centers:
        type: keyword
      clinical_trial:
        type: keyword
      clinical_trials:
        type: keyword
      dx_age:
        type: integer
      dx_ages:
        type: integer
      dx_cancer_type:
        type: keyword
      dx_cancer_types:
        type: keyword
      enrollment_age:
        type: integer
      enrollment_ages:
        type: integer
      enrollment_year:
        type: integer
      enrollment_years:
        type: integer
      ethnicities:
        type: keyword
      ethnicity:
        type: keyword
      race:
        type: keyword
      races:
        type: keyword
      sex:
        type: keyword
      sexes:
        type: keyword
      studies:
        type: keyword
      study:
        type: keyword
      study_type:
        type: keyword
      study_types:
        type: keyword
        
    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (d:demo)-->(c:case)-->(co:cohort)-->(ct:clinical_trial)
      WITH d, c, co, ct, 'Not Specified' AS n
      RETURN DISTINCT
        c.case_id as case_id,
        c.case_id as case_ids,
        COALESCE(c.arm, n) AS arm,
        COALESCE(c.arm, n) AS arms,
        COALESCE(c.biosp_f, n) AS biospecimens_available,
        COALESCE(c.center, n) AS center,
        COALESCE(c.center, n) AS centers,
        c.plco_dx_age AS dx_age,
        c.plco_dx_age AS dx_ages,
        c.plco_dx AS dx_cancer_type,
        c.plco_dx AS dx_cancer_types,
        c.rndyear AS enrollment_year,
        c.rndyear AS enrollment_years,
  
        COLLECT(COALESCE(co.cohort_id, n)) AS study,
        COLLECT(COALESCE(co.cohort_id, n)) AS studies,
  
        COALESCE(ct.clinical_trial_short_name, n) AS clinical_trial,
        COALESCE(ct.clinical_trial_short_name, n) AS clinical_trials,
        COALESCE(ct.clinical_trial_type, n) AS study_type,
        COALESCE(ct.clinical_trial_type, n) AS study_types,
  
        d.age AS enrollment_age,
        d.age AS enrollment_ages,
        COALESCE(d.hispanic_f, n) AS ethnicity,
        COALESCE(d.hispanic_f, n) AS ethnicities,
        COALESCE(d.race7, n) AS race,
        COALESCE(d.race7, n) AS races,
        COALESCE(d.sex, n) AS sex,
        COALESCE(d.sex, n) AS sexes
      "
  - index_name: studies
    type: neo4j
    # type mapping for each property of the index
    mapping:
      study_id:
        type: keyword
      study_code:
        type: keyword
      study_name:
        type: keyword
      study_type:
        type: keyword
      program:
        type: keyword
      num_cases:
        type: integer

      description: 
        type: keyword
      actual_start_date: 
        type: keyword
      actual_completion_date:
        type: keyword
      organization: 
        type: keyword
      numberOfPrograms: 
        type: integer
      numberOfStudies: 
        type: integer
      numberOfCases:
        type: integer
      numberOfFiles: 
        type: integer
        
    cypher_query: "
      MATCH (ct:clinical_trial)<--(co:cohort)<--(c:case)
      RETURN
        co.clinical_trials_gov_id AS study_id,
        co.cohort_id AS study_code,
        co.cohort_title AS study_name,
        ct.clinical_trial_type AS study_type,
        ct.clinical_trial_short_name AS program,
        COUNT(DISTINCT c) AS num_cases,

        co.cohort_description AS description,
        co.start_date AS actual_start_date, 
        co.completion_date AS actual_completion_date,
        ct.lead_organization AS organization,

        COUNT(DISTINCT ct) AS numberOfPrograms,
        COUNT(DISTINCT co) AS numberOfStudies,
        COUNT(DISTINCT c) AS numberOfCases,
        COUNT(DISTINCT c.file) AS numberOfFiles
    "
